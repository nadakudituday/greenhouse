#include <esp_now.h>
#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME680 bme;

// Replace with the receiver's MAC address
uint8_t broadcastAddress[] = {0x3C, 0x8A, 0x1F, 0x9B, 0x7F, 0xB4};

// Structure to send BME680 data
typedef struct struct_message {
    int id;          // Unique ID to identify this sender (1 for BME680)
    float x;         // Temperature
    float y;         // Humidity
    float z;         // Pressure
    float a;         // Gas resistance
} struct_message;

// Create a struct_message instance
struct_message myData;

// Create peer interface
esp_now_peer_info_t peerInfo;

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
    Serial.print("\r\nLast Packet Send Status:\t");
    Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
    // Initialize Serial Monitor
    Serial.begin(115200);

    // Set device as a Wi-Fi Station
    WiFi.mode(WIFI_STA);

    // Initialize BME680 sensor
    if (!bme.begin()) {
        Serial.println("Could not find a valid BME680 sensor, check wiring!");
        while (1);
    }

    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
    bme.setHumidityOversampling(BME680_OS_2X);
    bme.setPressureOversampling(BME680_OS_4X);
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    bme.setGasHeater(320, 150); // 320°C for 150 ms

    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    // Register send callback
    esp_now_register_send_cb(OnDataSent);

    // Register peer
    memcpy(peerInfo.peer_addr, broadcastAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;

    // Add peer        
    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
        Serial.println("Failed to add peer");
        return;
    }
}

void loop() {
    // Perform a BME680 reading
    if (!bme.performReading()) {
        Serial.println("Failed to perform reading from BME680 sensor!");
        delay(2000);
        return;
    }

    // Set data to send
    myData.id = 1; // Unique ID for BME680 sender
    myData.x = bme.temperature;
    myData.y = bme.humidity;
    myData.z = bme.pressure / 100.0; // Convert to hPa
    myData.a = bme.gas_resistance / 1000.0; // Convert to kΩ

    // Send message via ESP-NOW
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

    if (result == ESP_OK) {
        Serial.println("Sent with success");
    } else {
        Serial.println("Error sending the data");
    }

    delay(10000); // Delay 10 seconds before sending again
}