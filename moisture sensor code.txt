#include <esp_now.h>
#include <WiFi.h>

// Define the GPIO pin for the soil moisture sensor
#define SOIL_MOISTURE_PIN 34  // ADC-capable GPIO pin on ESP32

// Replace with the receiver's MAC address
uint8_t broadcastAddress[] = {0xAC, 0x67, 0xB2, 0x38, 0xBF, 0x8C};

// Structure to send soil moisture data
typedef struct struct_message {
    int id;          // Unique ID to identify this sender (2 for soil moisture)
    float x;         // Scaled soil moisture value
    float y;         // Unused, for consistency
    float z;         // Unused, for consistency
    float a;         // Unused, for consistency
} struct_message;

// Create a struct_message instance
struct_message myData;

// Create peer interface
esp_now_peer_info_t peerInfo;

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
    Serial.print("\r\nLast Packet Send Status:\t");
    Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
    // Initialize Serial Monitor
    Serial.begin(115200);

    // Set device as a Wi-Fi Station
    WiFi.mode(WIFI_STA);

    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    // Register callback for send status
    esp_now_register_send_cb(OnDataSent);

    // Register peer
    memcpy(peerInfo.peer_addr, broadcastAddress, 6);
    peerInfo.channel = 0;
    peerInfo.encrypt = false;

    // Add peer
    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
        Serial.println("Failed to add peer");
        return;
    }
}

void loop() {
    // Read the raw analog value from the soil moisture sensor
    int rawSoilMoisture = analogRead(SOIL_MOISTURE_PIN);

    // Map the raw values (e.g., 1200-2900) to a range of 0-100
    float scaledSoilMoisture = map(rawSoilMoisture, 2900, 1200, 0, 100);

    // Constrain the values to stay within 0-100
    scaledSoilMoisture = constrain(scaledSoilMoisture, 0, 100);

    // Print the scaled soil moisture value
    Serial.print("Scaled Soil Moisture: ");
    Serial.println(scaledSoilMoisture);

    // Set data to send
    myData.id = 2; // Unique ID for soil moisture sender
    myData.x = scaledSoilMoisture; // Soil moisture value

    // Send message via ESP-NOW
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

    if (result == ESP_OK) {
        Serial.println("Sent with success");
    } else {
        Serial.println("Error sending the data");
    }

    delay(1000); // Delay before the next reading
}